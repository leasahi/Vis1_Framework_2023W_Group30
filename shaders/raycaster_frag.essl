precision highp sampler3D;
uniform sampler3D volume;
uniform vec3 volumeScale;

 flat in vec3 transformedEye;
 in vec3 rayDirection;

 uniform float isoValue;

//MIP = 0, ISO = 1
uniform int method;

// Intersect box implementation by Will Usher
// https://www.willusher.io/webgl/2019/01/13/volume-rendering-with-webgl
vec2 intersect_box(vec3 orig, vec3 dir) {
	const vec3 box_min = vec3(0);
	const vec3 box_max = vec3(1);
	vec3 inv_dir = 1.0 / dir;
	vec3 tmin_tmp = (box_min - orig) * inv_dir;
	vec3 tmax_tmp = (box_max - orig) * inv_dir;
	vec3 tmin = min(tmin_tmp, tmax_tmp);
	vec3 tmax = max(tmin_tmp, tmax_tmp);
	float t0 = max(tmin.x, max(tmin.y, tmin.z));
	float t1 = min(tmax.x, min(tmax.y, tmax.z));
	return vec2(t0, t1);
}

void main(){

	vec3 dir = normalize(rayDirection);
	vec2 hit = intersect_box(transformedEye, dir);
	if (hit.x > hit.y) {
		discard;
	}
	hit.x = max(hit.x, 0.0);

	// start
	vec3 start = transformedEye + hit.x * dir;

	// calculate steps
	vec3 dt_vec = 1.0 / (vec3(volumeScale) * abs(dir));
	float dt = min(dt_vec.x, min(dt_vec.y, dt_vec.z));

	// previous voxel
	vec3 rayPosPrev = start;
	float voxelPrev = texture(volume, rayPosPrev.xyz).r;

	// current voxel
	vec3 rayPosCurr = start;
	float voxelCurr;

	// alpha & color
	float alphaVal = 0.0;
	vec4 finalColor = vec4(0.0);

	// step along ray
	for(float t = hit.x; t < hit.y; t += dt){

		// get current voxel
		rayPosCurr += dir * dt;
        // Sample the volume data of the previous and current voxel
		voxelPrev = texture(volume, rayPosCurr.xyz).r;
		voxelCurr = texture(volume, rayPosCurr + dir * dt).r;

        // First Hit Compositing:
        if (method == 1){

            // Verify whether the isovalue is above the current voxel and at or below the next voxel
            if (voxelPrev < isoValue && voxelCurr >= isoValue) {

                // Interpolation factor
                float factor = (isoValue - voxelPrev) / (voxelCurr - voxelPrev);

                // Interpolate the 3D position
                vec3 hitPos = mix(rayPosCurr, rayPosCurr + dir * dt, factor);

                // Update the final color
                finalColor.rgb = hitPos;
                finalColor.a = 1.0;
                break;
            }

            // Break out of the loop if the accumulated alpha is close to 1.0
            if (alphaVal >= 0.95) {
                break;
            }
         }

        // MIP:
         else if (method == 0){
            // increase alpha
            if(voxelCurr > alphaVal){
                alphaVal = voxelCurr;
                finalColor = vec4(vec3(1.0), alphaVal);
            }
        }
    }
    // set fragment color
    gl_FragColor = vec4(finalColor);
}